/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'
    id 'java'
    id "org.sonarqube" version "3.5.0.2730"
    id "jacoco"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    repositories {
        jcenter()
    }
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    dependencies {
        // Use JUnit Jupiter for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
        testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
        implementation 'com.google.guava:guava:30.1.1-jre'
        implementation 'org.json:json:20180813'

    }
    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
    sonar {
        properties {
            property "sonar.sources", "src"
        }
    }

}

// Project specific stuff
project(':shared') {
}
project(':server') {
    dependencies {
        implementation project(':shared')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
project(':client') {
    dependencies {
        implementation project(':shared')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                if (configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if (configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/test/**/*"
        property "sonar.test.inclusions", "**/test/**/*.java"
        property "sonar.test.exclusions", "**/test/**/*"
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = fileTree(dir: ".", include: "**/build/jacoco/test.exec")

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = { true }
}
