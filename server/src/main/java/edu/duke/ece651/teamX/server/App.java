/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.teamX.server;

import edu.duke.ece651.teamX.shared.*;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;

public class App {

  //!!!! Just for testing!!!!
  public static void main(String[] args) throws IOException, ClassNotFoundException {
    Communicate communicate = new Communicate();
    ServerSocket ss = new ServerSocket(4477);
    int try_num = 3;
    Game game = new Game(try_num, 20);
    PlayerName namer = new ColorPlayerName();
    //Connect to players (Might need to be done in Game)
    ArrayList<Socket> socket_list = new ArrayList<Socket>();
    for (int i = 0; i < try_num; i++) {
      Socket pSocket = ss.accept();
      socket_list.add(pSocket);
      game.createPlayer(pSocket, namer.getName());
    }

    game.createMap();

    for (int i = 0; i < try_num; i++) {
      // receive results from client and let game setUnits using this result
      ArrayList<Territory> res =
          (ArrayList<Territory>) communicate.receiveObject(socket_list.get(i));

      game.setUnits(res);
    }
    // print out the master map
    game.printMasterMap();

    while (true) {
      playOneTurn(game, try_num, communicate, socket_list);
      if (sendHasWonSig(game, communicate, socket_list)) {
        System.out.println("Game over");
        break;
      }
    }
  }

  private static boolean sendHasWonSig(Game game, Communicate communicate,
      ArrayList<Socket> socket_list) throws IOException {
    for (Socket s : socket_list) {
      communicate.sendObject(s, game.hasWon());
    }
    if (game.hasWon()) {
      for (Socket s : socket_list) {
        communicate.sendObject(s, game.whoWons());
      }
    }
    return game.hasWon();
  }

  private static void sendHasLostSig(Game game, Communicate communicate,
      ArrayList<Socket> socket_list) throws IOException {
    for (Socket s : socket_list) {
      communicate.sendObject(s, game.hasLost());
    }
    if (game.hasLost()) {
      for (Socket s : socket_list) {
        communicate.sendObject(s, game.whoLost());
      }
    }
  }

  private static void playOneTurn(Game game, int try_num, Communicate communicate,
      ArrayList<Socket> socket_list)
      throws IOException, ClassNotFoundException {
    game.sendMapAll();

    // collect all the moves and attacks from players
    ArrayList<ActionSender> allActions = new ArrayList<ActionSender>();
    for (int i = 0; i < try_num; i++) {
      ArrayList<MoveSender> moves =
          (ArrayList<MoveSender>) communicate.receiveObject(socket_list.get(i));
      ArrayList<AttackSender> attacks =
          (ArrayList<AttackSender>) communicate.receiveObject(socket_list.get(i));
      allActions.addAll(moves);
      allActions.addAll(attacks);
    }
    game.printActions(allActions);
    try {
      game.handleActionSenders(allActions);
    } catch (IllegalArgumentException e) {
//      TODO: send back to client
    }

    game.printMasterMap();
  }

}
